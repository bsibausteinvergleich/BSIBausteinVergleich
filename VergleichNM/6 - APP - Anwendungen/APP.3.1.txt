3.1 Basis-Anforderungen


APP.3.1.A1 Authentisierung bei Webanwendungen [Entwickler]
Um auf geschützte Ressourcen einer Webanwendung zugreifen zu können, MÜSSEN sich Benutzer gegenüber der Anwendung authentisieren.
Dafür MUSS eine geeignete Authentisierungsmethode ausgewählt und der Auswahlprozess dokumentiert werden.
Wird Basic-Auth verwendet, MUSS eine Transportverschlüsselung eingesetzt werden.
Die Passwortdateien auf dem Webserver MÜSSEN ausreichend geschützt werden.
Es MUSS eine zentrale Authentisierungskomponente verwendet werden, die möglichst mit etablierten Standardkomponenten umgesetzt wurde.
Die Komponente MUSS die Benutzer dazu zwingen, sichere Passwörter gemäß einer Passwort-Richtlinie zu benutzen.
Speichert eine Webanwendung Authentisierungsdaten auf einem Client, MUSS der Benutzer explizit zustimmen („Opt-In“) und auf die Risiken der Funktion hingewiesen werden.
Um sicherzugehen, dass eine gültige Sitzung (Session-ID) nicht von einem Angreifer übernommen wurde, MÜSSEN sich bei kritischen Funktionen die Benutzer erneut authentisieren.
Auch MÜSSEN in der Webanwendung Grenzwerte für fehlgeschlagene Anmeldeversuche definiert sein.
Alle angebotenen Authentisierungsverfahren der Webanwendung MÜSSEN das gleiche Sicherheitsniveau aufweisen.
Zudem MÜSSEN Benutzer sofort informiert werden, wenn das Passwort zurückgesetzt wurde.

APP.3.1.A2 Zugriffskontrolle bei Webanwendungen [Entwickler]
Es MUSS mittels einer Autorisierungskomponente sichergestellt werden, dass Benutzer nur Aktionen durchführen können, zu denen sie berechtigt sind.
Jeder Zugriff auf geschützte Inhalte und Funktionen MUSS kontrolliert werden, bevor er ausgeführt wird.
Allen Benutzern MÜSSEN restriktive Zugriffsrechte ordnungsgemäß zugewiesen werden.
Wenn Mitarbeiter für eine Webanwendung Zugriffsrechte erhalten oder sich diese verändern, MÜSSEN die Verantwortlichen dies prüfen, bestätigen und nachvollziehbar dokumentieren.
Die Dokumentation der vergebenen Zugriffsrechte MUSS immer auf dem aktuellen Stand sein.
Auch MUSS es ein geregeltes Verfahren geben, um Benutzern Zugriffsrechte wieder zu entziehen.
Sollte es nicht möglich sein, Zugriffsrechte zuzuweisen, MUSS dafür ein zusätzliches Sicherheitsprodukt eingesetzt werden.
Es MÜSSEN alle von der Webanwendung verwalteten Ressourcen von der Autorisierungskomponente berücksichtigt werden.
Die Benutzer MÜSSEN serverseitig und zentral auf einem vertrauenswürdigen IT-System autorisiert werden.
Ist die Zugriffskontrolle fehlerhaft, MÜSSEN Zugriffe abgelehnt werden.
Auch MUSS es eine Zugriffskontrolle bei URL-Aufrufen und Objekt-Referenzen geben.
Ebenso MUSS der Zugriff auf Dateien durch die Benutzer mit restriktiven Dateisystemberechtigungen beschränkt werden und es MUSS ein sicherer Umgang mit temporären Dateien vorgesehen werden.

APP.3.1.A3 Sicheres Session-Management [Entwickler]
Session-IDs MÜSSEN geeignet geschützt werden.
Sie MÜSSEN zufällig erzeugt werden (mit ausreichender Entropie).
Falls das der Webanwendung zugrunde liegende Framework Session-IDs generieren kann, MUSS die Funktion des Frameworks verwendet werden.
Werden Session-IDs mithilfe eines Frameworks verwaltet und erzeugt, so MUSS das Framework sicher konfiguriert werden.
Auch MUSS die Session-ID ausreichend geschützt werden, wenn sie übertragen und clientseitig gespeichert wird.
Eine Webanwendung MUSS den Benutzern die Möglichkeit geben, eine bestehende Sitzung explizit zu beenden.
Nachdem sich der Benutzer angemeldet hat, MUSS eine bereits bestehende Session-ID durch eine neue ersetzt werden.
Sitzungen MÜSSEN eine maximale Gültigkeitsdauer (Timeout) besitzen.
Inaktive Sitzungen MÜSSEN automatisch nach einer bestimmten Zeit ungültig werden.
Nachdem die Sitzung ungültig ist, MÜSSEN alle Sitzungsdaten (sowohl server- als auch clientseitig) ungültig und gelöscht sein.

APP.3.1.A4 Kontrolliertes Einbinden von Daten und Inhalten bei Webanwendungen [Entwickler]
Es MUSS sichergestellt werden, dass eine Webanwendung ausschließlich vorgesehene Daten und Inhalte einbindet und an den Benutzer ausliefert.
Falls eine Webanwendung eine Upload-Funktion für Dateien anbietet, MUSS diese Funktion so weit wie möglich eingeschränkt werden.
Auch Zugriffs- und Ausführungsrechte MÜSSEN in diesem Fall restriktiv gesetzt werden.
Zudem MUSS sichergestellt werden, dass ein Benutzer Dateien nur im vorgegebenen Pfad speichern kann.
Der Ablageort der Uploads DARF NICHT durch den Benutzer beeinflusst werden können.
Die Ziele der Weiterleitungsfunktion einer Webanwendung MÜSSEN ausreichend eingeschränkt werden, sodass Benutzer ausschließlich auf vertrauenswürdige Webseiten weitergeleitet werden.
Verlässt ein Benutzer die Vertrauensdomäne, MUSS er informiert werden.

APP.3.1.A5 Protokollierung sicherheitsrelevanter Ereignisse von Webanwendungen [Entwickler]
Eine Webanwendung MUSS sicherheitsrelevante Ereignisse mit den erforderlichen Merkmalen nachvollziehbar protokollieren.
Der Zugriff auf die Protokollierungsdaten MUSS auf wenige befugte Personen eingeschränkt werden.
Bei der Auswertung der Protokollierungsdaten MUSS sichergestellt werden, dass Schadcode in Protokoll-Einträgen vom Auswertungsprogramm nicht interpretiert wird.
Bei der Protokollierung und beim Umgang mit den Protokollierungsdaten MÜSSEN die gesetzlichen Vorgaben eingehalten werden.

APP.3.1.A6 Zeitnahes Einspielen sicherheitsrelevanter Patches und Updates
Administratoren MÜSSEN sich regelmäßig über aktuelle Schwachstellen informieren und sicherheitsrelevante Updates zeitnah einspielen.
Software-Updates und Patches für Webanwendungen MÜSSEN aus vertrauenswürdigen Quellen bezogen werden.
Sie MÜSSEN vor dem Roll-Out ausreichend getestet werden.
Bevor Updates oder Patches installiert werden, MUSS stets sichergestellt sein, dass der ursprüngliche Zustand der Webanwendung wiederhergestellt werden kann.
Das aktuelle Patchlevel MUSS dokumentiert werden.

APP.3.1.A7 Schutz vor unerlaubter automatisierter Nutzung von Webanwendungen [Entwickler]
Webanwendungen MÜSSEN durch geeignete Schutzmechanismen vor automatisierten Zugriffen geschützt werden.
Dabei MUSS jedoch berücksichtigt werden, wie sich die Schutzmechanismen auf die Nutzungsmöglichkeiten berechtigter Benutzer auswirken.
Wenn die Webanwendung RSS-Feeds oder andere Funktionen, die explizit für die automatisierte Nutzung vorgesehen sind, enthält, MUSS dies ebenfalls bei der Konfiguration der Schutzmechanismen berücksichtigt werden.

3.2 Standard-Anforderungen
Gemeinsam mit den Basis-Anforderungen entsprechen die folgenden Anforderungen dem Stand der Technik für den Baustein APP.3.1 Webanwendungen.
Sie SOLLTEN grundsätzlich umgesetzt werden.

APP.3.1.A8 Systemarchitektur einer Webanwendung
Bereits in der Entwurfsphase einer Webanwendung SOLLTEN Sicherheitsaspekte beachtet werden.
Auch SOLLTE darauf geachtet werden, dass die Architektur der Webanwendung die Geschäftslogik der Institution exakt erfasst und korrekt umsetzt.
4 IT-Grundschutz-Kompendium: Stand Februar 2019

APP.3.1 APP.3: Netzbasierte Dienste
In der Systemarchitektur SOLLTE vorgesehen werden, die Serverdienste durch jeweils separate IT-Systeme voneinander zu trennen.
Auch SOLLTEN jeweils eigene Benutzerkonten für die unterschiedlichen Serverprozesse der Systemkomponenten verwendet werden.
Dabei SOLLTEN die Rechte dieser Dienstkonten auf Betriebssystemebene soweit eingeschränkt werden, dass nur auf die erforderlichen Ressourcen und Dateien des Betriebssystems zugegriffen werden kann.
Die Netzarchitektur SOLLTE einen mehrschichtigen Ansatz verfolgen (Multi-Tier-Architektur).
Dabei SOLLTEN mindestens die Sicherheitszonen Webschicht, Anwendungsschicht und Datenschicht berücksichtigt werden.
Aus diesen Zonen SOLLTE NICHT auf Systeme im Intranet zugegriffen werden können.
Die Softwarearchitektur der Webanwendung SOLLTE mit allen Bestandteilen und Abhängigkeiten dokumentiert werden.
Die Dokumentation SOLLTE bereits während des Projektverlaufs aktualisiert und angepasst werden, sodass sie schon in der Entwicklungsphase benutzt werden kann und Entscheidungsfindungen nachvollziehbar sind.
Es SOLLTEN in der Dokumentation alle für den Betrieb notwendigen Komponenten, die nicht Bestandteil der Webanwendung sind, als solche gekennzeichnet werden.
Ebenso SOLLTE daraus hervorgehen, welche Komponenten welche Sicherheitsmechanismen umsetzen, wie die Webanwendung in eine bestehende Infrastruktur integriert wird und welche kryptografischen Funktionen und Verfahren eingesetzt werden.

APP.3.1.A9 Beschaffung, Entwicklung und Erweiterung von Webanwendungen [Tester, Leiter Entwicklung, Entwickler, Beschaffer]
Wenn Produkte für Webanwendungen beschafft werden, SOLLTE ein Anforderungskatalog erstellt werden.
Um verschiedene Produkte miteinander vergleichen zu können, SOLLTE eine Bewertungsskala entwickelt werden.
Wird die eigentliche Webanwendung oder eine Erweiterung hierzu eigenentwickelt, SOLLTE ein geeignetes Vorgehensmodell genutzt werden.
Dabei SOLLTEN vor der Inbetriebnahme alle Phasen des Modells durchlaufen werden.
Für die Entwicklung SOLLTEN zudem Programmierrichtlinien vorgegeben werden, die dabei helfen, ein einheitliches Sicherheitsniveau zu etablieren.
Wenn die Sicherheitsmechanismen einer Webanwendung entworfen und entwickelt werden, SOLLTEN diese möglichst zukünftige Standards und Angriffstechniken berücksichtigen.
Bei der Anwendungsentwicklung SOLLTEN die Entwicklungs-, Test- und Produktivsysteme voneinander getrennt sein.
Falls die Webanwendung von einem Dienstleister entwickelt wird, SOLLTE sichergestellt werden, dass dieser Dienstleister die nötigen Sicherheitsanforderungen bei der Entwicklung umsetzt und der Auftraggeber jederzeit auf den Quelltext zugreifen kann.

APP.3.1.A10 Test und Freigabe von Webanwendungen [Leiter IT]
Bevor Webanwendungen oder Erweiterungen und Anpassungen, die selbst oder im Auftrag entwickelt wurden, in den Produktivbetrieb übernommen werden, SOLLTEN sie getestet werden.
Die Ergebnisse der Tests SOLLTEN dokumentiert werden.
Wenn die Tests erfolgreich verlaufen sind, SOLLTE die Webanwendung formal freigegeben werden.
Darüber hinaus SOLLTE ein Verfahren zur Fehlerbehebung etabliert werden.

APP.3.1.A11 Sichere Anbindung von Hintergrundsystemen
Hintergrundsysteme von Webanwendungen, auf denen Funktionalitäten und Daten ausgelagert werden, SOLLTEN ausreichend geschützt werden.
Der Zugriff auf Hintergrundsysteme SOLLTE ausschließlich über definierte Schnittstellen und von definierten Systemen aus möglich sein.
Der Datenverkehr zwischen den Benutzern und der Webanwendung bzw. den Anwendungen und weiteren Diensten sowie den Hintergrundsystemen SOLLTE durch Sicherheitsgateways reglementiert werden.
Bei der Kommunikation über Standort- und Netzgrenzen hinweg SOLLTE der Datenverkehr außerdem authentisiert und verschlüsselt werden.
Zugriffe der Webanwendung auf Hintergrundsysteme SOLLTEN zudem mit minimalen Rechten erfolgen.
Beim Einsatz eines Enterprise Service Bus (ESB) muss sichergestellt werden, dass sich alle Dienste gegenüber dem ESB authentisieren, bevor ihnen ein Zugriff erlaubt wird.
Es SOLLTE ein eigenes logisches Netzsegment für den ESB vorhanden sein.
Der Zugriff auf den ESB SOLLTE ausschließlich durch die angeschlossenen Anwendungen und Dienste möglich sein.
Alle Zugriffe auf den ESB SOLLTEN authentisiert und bei der Kommunikation über Standort- und Netzgrenzen hinweg verschlüsselt sein.

APP.3.1.A12 Sichere Konfiguration von Webanwendungen [Entwickler]
Eine Webanwendung SOLLTE so konfiguriert sein, dass auf ihre Ressourcen und Funktionen ausschließlich über die vorgesehenen, abgesicherten Kommunikationspfade zugegriffen werden kann.
Der Zugriff auf nicht benötigte Ressourcen und Funktionen SOLLTE daher eingeschränkt werden.
Folgendes SOLLTE bei der Konfiguration von Webanwendungen berücksichtigt werden:
• Deaktivierung nicht benötigter HTTP-Methoden
• Zeichenkodierungskonfiguration
• Festlegung von Grenzwerten für Zugriffsversuche
• Administration einer Webanwendung

APP.3.1.A13 Restriktive Herausgabe sicherheitsrelevanter Informationen [Entwickler]
Webseiten und Rückantworten von Webanwendungen SOLLTEN keine Informationen beinhalten, die einem Angreifer Hinweise geben, mit denen er Sicherheitsmechanismen umgehen kann.
Dazu SOLLTE sichergestellt werden,dass:
• nur neutrale Fehlermeldungen ausgegeben werden,
• keine sicherheitsrelevanten Kommentare oder Produkt- und Versionsangaben preisgegeben werden,
• nur eingeschränkt auf sicherheitsrelevante Dokumentation zugegriffen werden kann
• nicht benötigte Dateien regelmäßig gelöscht werden,
• externe Suchmaschinen die Webanwendung geeignet erfassen sowie
• auf absolute lokale Pfadangaben verzichtet wird.
Die Webanwendung SOLLTE NICHT aus unsicheren Netzen administriert werden.
Administrationszugänge SOLLTEN auf vertrauenswürdige separate Netzsegmente und IT-Systeme beschränkt werden.
Konfigurationsdateien der Webanwendung SOLLTEN außerhalb des Web-Root-Verzeichnisses gespeichert werden.

APP.3.1.A14 Schutz vertraulicher Daten [Entwickler]
Vertrauliche Daten einer Webanwendung SOLLTEN durch sichere, kryptografische Algorithmen geschützt werden.
Werden solche Daten übertragen, SOLLTE eine sichere Transportverschlüsselung eingesetzt werden, die dem Stand der Technik entspricht.
Im Fall von Verbindungsfehlern SOLLTE bei einem verschlüsselten Kanal NICHT auf einen unverschlüsselten Kanal gewechselt werden.
Um Daten vom Client zum Server zu übertragen, SOLLTE die HTTP-Post-Methode verwendet werden.
Auch SOLLTE die Webanwendung durch Direktiven gewährleisten, dass clientseitig keine schützenswerten Daten zwischengespeichert werden.
Weiterhin SOLLTEN in Formularen keine vertraulichen Formulardaten im Klartext angezeigt und auch nicht vom Browser gespeichert werden.
Zugangsdaten der Webanwendung SOLLTEN serverseitig mithilfe von sicheren kryptografischen Algorithmen vor unbefugtem Zugriff geschützt werden (Salted Hash).
Ebenso SOLLTEN Dateien mit Quelltexten der Webanwendung nicht abgerufen werden können.

APP.3.1.A15 Verifikation essenzieller Änderungen
Sollen wichtige Einträge geändert werden, SOLLTE die Eingabe durch ein Passwort erneut verifiziert werden.
Die Benutzer SOLLTEN über Änderungen mittels Kommunikationswegen außerhalb der Web-Anwendung informiert werden, beispielsweise per E-Mail.

APP.3.1.A16 Umfassende Eingabevalidierung und Ausgabekodierung [Entwickler]
Alle an eine Webanwendung übergebenen Daten SOLLTEN als potenziell gefährlich behandelt und entsprechend gefiltert werden.
Dabei SOLLTEN alle Eingabedaten sowie Datenströme und Sekundärdaten (z. B. Session-IDs) validiert werden.
Serverseitig SOLLTEN die Daten auf einem vertrauenswürdigen IT-System geprüft werden.
Fehleingaben SOLLTEN möglichst nicht automatisch behandelt werden (engl. Sanitizing).
Lässt es sich jedoch nicht vermeiden, SOLLTE Sanitizing sicher umgesetzt werden, damit ein Missbrauch ausgeschlossen ist.
Ausgabedaten SOLLTEN so kodiert werden, dass schadhafter Code auf dem Zielsystem nicht interpretiert oder ausgeführt wird.

APP.3.1.A17 Fehlerbehandlung [Entwickler]
Treten während des Betriebs einer Webanwendung Fehler auf, SOLLTEN diese so behandelt werden, dass die Webanwendung weiter in einem konsistenten Zustand verbleibt.
Folgende Punkte SOLLTEN bei der Fehlerbehandlung berücksichtigt werden:
• Fehlermeldungen SOLLTEN protokolliert werden,
• eine veranlasste Aktion SOLLTE im Fehlerfall abgebrochen werden und
• in der Folge SOLLTE der Zugriff auf die angeforderte Ressource oder Funktion abgewiesen werden.
Zuvor reservierte Ressourcen SOLLTEN im Rahmen der Fehlerbehandlung wieder freigegeben werden.
Auch SOLLTE der Fehler möglichst von der Webanwendung selbst behandelt werden.

APP.3.1.A18 Kontrolle der Protokollierungsdaten
Es SOLLTE für jede Webanwendung ein Konzept erstellt werden, das festlegt, wie umfangreich die Protokollierung sein soll und wie die Daten auszuwerten sind.
Zudem SOLLTE ein Verantwortlicher benannt werden, der die Protokollierungsdaten auswertet.
Die Ergebnisse SOLLTEN dem ISB oder einem anderen hierfür bestimmten Mitarbeiter vorgelegt werden.

APP.3.1.A19 Schutz vor SQL-Injection
Webanwendungen SOLLTEN alle Eingaben und Parameter sorgfältig überprüfen und filtern, bevor diese an das Datenbanksystem weitergeleitet werden.
Um Daten und SQL-Statements zu trennen, SOLLTEN Stored Procedures bzw. Prepared SQL-Statements eingesetzt werden.
Wenn weder Stored Procedures noch Prepared SQL-Statements eingesetzt werden können, SOLLTEN die SQL-Queries separat abgesichert werden.

APP.3.1.A21 Sichere HTTP-Konfiguration bei Webanwendungen [Entwickler]
Zum Schutz vor Clickjacking-Angriffen SOLLTE in den HTTP-Response-Headern der Webanwendung die Direktive X-FRAME-OPTIONS mit geeigneten Parametern gesetzt werden.
Darüber hinaus SOLLTE eine HTTP-Content-Security-Policy eingesetzt werden.

APP.3.1.A22 Überprüfung von Webanwendungen
Webanwendungen SOLLTEN regelmäßig auf Sicherheitsprobleme hin überprüft werden.
Auch SOLLTEN regelmäßig Revisionen durchgeführt werden.
Die Ergebnisse SOLLTEN nachvollziehbar dokumentiert, ausreichend geschützt und vertraulich behandelt werden.
Abweichungen SOLLTE nachgegangen werden.
Die Ergebnisse SOLLTEN dem ISB vorgelegt werden.

APP.3.1.A23 Verhinderung von Cross-Site Request Forgery [Entwickler]
Die Webanwendung SOLLTE Sicherheitsmechanismen unterstützen, die es ermöglichen, beabsichtigte Seitenaufrufe des Benutzers von unbeabsichtigt weitergeleiteten Befehlen Dritter zu unterscheiden.
Mindestens SOLLTE dabei geprüft werden, ob neben der Session-ID ein geheimes Token für den Zugriff auf geschützte Ressourcen und Funktionen benötigt wird.
Auch SOLLTE bei Webanwendungen das Referrer-Feld im HTTP-Request als zusätzliches Merkmal geprüft werden, um so einen beabsichtigten Aufruf durch einen Benutzer zu erkennen.


3.3 Anforderungen bei erhöhtem Schutzbedarf

APP.3.1.A20 Einsatz von Web Application Firewalls (CIA)
Damit Daten auf höheren Protokollebenen gefiltert werden können, SOLLTEN Institutionen zusätzlich auf Web Application Firewalls (WAF) zurückgreifen.
Wird eine WAF eingesetzt, SOLLTE die Konfiguration auf die zu schützende Webanwendung angepasst werden.
Die Konfiguration der WAF SOLLTE nach jedem Update der Webanwendung geprüft werden.

APP.3.1.A24 Verhinderung der Blockade von Ressourcen [Entwickler] (A)
Zum Schutz vor Denial-of-Service-(DoS)-Angriffen SOLLTEN ressourcenintensive Operationen vermieden und besonders abgesichert werden.
Ebenso SOLLTE ein möglicher Überlauf von Protokollierungsdaten bei Webanwendungen überwacht und verhindert werden.
SOAP-Nachrichten SOLLTEN anhand eines entsprechenden XML-Schemas validiert werden.
Bei kritischen Diensten und Anwendungen SOLLTE geprüft werden, ob eine Zusammenarbeit mit DDoS-Mitigation-Dienstleistern sinnvoll ist.